datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Person {
  id       Int     @id @default(autoincrement())
  name     String
  age      DateTime?
  language String
  user     User    @relation(fields: [userId], references: [id])
  userId   Int     @unique
}

model User {
  id       Int      @id @default(autoincrement())
  email    String   @unique
  username String?
  fullName String?
  firstName String?
  lastName String?
  phoneNumber String?
  role String?
  password String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  person   Person?
  profile  Profile?
}

model Profile {
  id       Int     @id @default(autoincrement())
  username String  @unique
  email    String?
  bio      String?
  urls     String[]
  user     User    @relation(fields: [userId], references: [id])
  userId   Int     @unique
}

model Notification {
  id                  Int     @id @default(autoincrement())
  email               String
  type                NotificationType @default(ALL)
  mobile              Boolean @default(false)
  communicationEmails Boolean @default(false) @map("communication_emails")
  socialEmails        Boolean @default(false) @map("social_emails")
  marketingEmails     Boolean @default(false) @map("marketing_emails")
  securityEmails      Boolean @default(true)
}

enum NotificationType {
  ALL
  MENTIONS
  NONE
}

model Message {
  id       String   @id @default(uuid())
  content  String
  timestamp DateTime
  sender    String
  receiver  String
}

model Task {
  id        String   @id @default(uuid())
  title     String
  email     String
  status    String
  priority  String
  label     String?
  createTime DateTime @default(now())
}

model Document {
  id         String    @id @default(uuid())
  name       String
  type       String
  parentId   String?   @map("parent_id")
  ownerEmail String    
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")
  cloudDocument CloudDocument?
  permissions DocumentPermission[]
  fileLibrary FileLibrary[]
}

model CloudDocument {
  id         String    @id @default(uuid())
  documentId String    @unique
  document   Document  @relation(fields: [documentId], references: [id])
  name       String
  content    String
  version    Int       @default(1)
  lastEditedBy String?
  lastEditedAt DateTime @default(now())
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")
  history    CloudDocumentHistory[]
}

model CloudDocumentHistory {
  id         String    @id @default(uuid())
  documentId String
  document   CloudDocument @relation(fields: [documentId], references: [documentId])
  content    String
  version    Int
  editedBy   String?
  editedAt   DateTime @default(now())
  createdAt  DateTime @default(now()) @map("created_at")
}

model DocumentPermission {
  id         String    @id @default(uuid())
  documentId String
  document   Document  @relation(fields: [documentId], references: [id])
  userEmail  String
  permission String   @default("EDIT")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  @@unique([documentId, userEmail])
}

model WhiteBoard {
  id           String    @id @default(uuid())
  name         String
  ownerEmail   String
  lastEditedAt DateTime @default(now())
  createdAt    DateTime @default(now())
  nodes        Json[]
  edges        Json[]
  version      Int      @default(1)
  lastEditedBy String?
  history      WhiteBoardHistory[]
  permissions  WhiteBoardPermission[]
  fileLibrary  FileLibrary[]
}

model WhiteBoardHistory {
  id           String      @id @default(uuid())
  name         String
  whiteBoardId String
  whiteBoard   WhiteBoard  @relation(fields: [whiteBoardId], references: [id])
  nodes        Json[]
  edges        Json[]
  version      Int
  editedBy     String?
  editedAt     DateTime @default(now())
  createdAt    DateTime @default(now())
}

model WhiteBoardPermission {
  id           String     @id @default(uuid())
  whiteBoardId String
  whiteBoard   WhiteBoard @relation(fields: [whiteBoardId], references: [id])
  userEmail    String
  permission   String     @default("EDIT") // EDIT, VIEW, etc.
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Table {
  id           String    @id @default(uuid())
  locale       String
  name         String
  resources    Json[]
  sheetOrder   Json[]
  sheets       Json
  styles       Json
  workbookId   String
  ownerEmail   String
  lastEditedAt DateTime @default(now())
  createdAt    DateTime @default(now())
  version      Int      @default(1)
  lastEditedBy String?
  history      TableHistory[]
  permissions  TablePermission[]
}

model TableHistory {
  id           String   @id @default(uuid())
  name         String
  tableId      String
  table        Table    @relation(fields: [tableId], references: [id])
  resources    Json[]
  sheetOrder   Json[]
  sheets       Json
  styles       Json
  version      Int
  editedBy     String?
  editedAt     DateTime @default(now())
  createdAt    DateTime @default(now())
}

model TablePermission {
  id           String    @id @default(uuid())
  tableId      String
  table        Table     @relation(fields: [tableId], references: [id])
  userEmail    String
  permission   String    @default("EDIT") // EDIT, VIEW, etc.
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model FileLibrary {
  id         String    @id @default(uuid())
  fileId     String    @unique
  src        String
  type       String    // document or whiteboard
  document   Document? @relation(fields: [documentId], references: [id])
  documentId String?
  whiteBoard WhiteBoard? @relation(fields: [whiteBoardId], references: [id])
  whiteBoardId String?
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")
}

model Project {
  id          String    @id @default(uuid())
  name        String
  description String?
  creator     String
  status      String
  activities  Json[]
  progress    Int
  deadline    DateTime?
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  members     ProjectMember[]
  teams       ProjectTeam[]
}

model ProjectMember {
  id        String   @id @default(uuid())
  email     String
  joinedAt  DateTime @default(now())
  role      String
  project   Project  @relation(fields: [projectId], references: [id])
  projectId String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model ProjectTeam {
  id          String    @id @default(uuid())
  project     Project   @relation(fields: [projectId], references: [id])
  projectId   String
  name        String
  owner       String
  description String?
  members     Json[]
  lists       ProjectList[]
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
}

model ProjectList {
  id          String    @id @default(uuid())
  projectTeam ProjectTeam @relation(fields: [projectTeamId], references: [id])
  projectTeamId String
  name        String
  owner       String
  cards       Json[]
  listmembers Json[]
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
}